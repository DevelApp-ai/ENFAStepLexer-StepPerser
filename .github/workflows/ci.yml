name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  DOTNET_VERSION: '8.0.x'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.SemVer }}
      nugetVersion: ${{ steps.final-version.outputs.final_nuget_version }}
      isPrerelease: ${{ steps.final-version.outputs.is_prerelease }}
      versionType: ${{ steps.final-version.outputs.version_type }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml
        
    - name: Determine final version based on PR context
      id: final-version
      run: |
        BASE_VERSION="${{ steps.gitversion.outputs.SemVer }}"
        NUGET_VERSION="${{ steps.gitversion.outputs.NuGetVersionV2 }}"
        
        # Determine version type and appropriate tagging based on context
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TARGET_BRANCH="${{ github.base_ref }}"
          PR_NUMBER="${{ github.event.number }}"
          
          echo "Pull Request Context:"
          echo "  Target Branch: $TARGET_BRANCH"
          echo "  PR Number: $PR_NUMBER"
          echo "  Base Version: $BASE_VERSION"
          
          if [[ "$TARGET_BRANCH" == "main" ]]; then
            # PR targeting main â†’ beta version
            CLEAN_VERSION=$(echo "$BASE_VERSION" | sed 's/-.*$//')
            FINAL_VERSION="${CLEAN_VERSION}-beta.${PR_NUMBER}"
            VERSION_TYPE="beta"
            echo "PR to main: Using beta version $FINAL_VERSION"
          else
            # PR targeting other branches â†’ alpha version  
            CLEAN_VERSION=$(echo "$BASE_VERSION" | sed 's/-.*$//')
            FINAL_VERSION="${CLEAN_VERSION}-alpha.${PR_NUMBER}"
            VERSION_TYPE="alpha"
            echo "PR to $TARGET_BRANCH: Using alpha version $FINAL_VERSION"
          fi
          
          IS_PRERELEASE="true"
        else
          # Direct push to branch - use GitVersion output as-is
          FINAL_VERSION="$NUGET_VERSION"
          if [[ "${{ steps.gitversion.outputs.PreReleaseTag }}" != "" ]]; then
            IS_PRERELEASE="true"
            VERSION_TYPE="ci"
          else
            IS_PRERELEASE="false" 
            VERSION_TYPE="release"
          fi
          echo "Direct push: Using GitVersion output $FINAL_VERSION"
        fi
        
        echo "Final version calculation:"
        echo "  Base Version: $BASE_VERSION"
        echo "  Final Version: $FINAL_VERSION"
        echo "  Is Prerelease: $IS_PRERELEASE"
        echo "  Version Type: $VERSION_TYPE"
        
        echo "final_nuget_version=$FINAL_VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

  build-and-test:
    runs-on: ubuntu-latest
    needs: calculate-version
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore -p:Version=${{ needs.calculate-version.outputs.version }}
      
    - name: Test
      run: dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory ./TestResults
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.configuration }}
        path: ./TestResults
        
    - name: Pack NuGet packages with appropriate versioning
      if: matrix.configuration == 'Release'
      run: |
        VERSION_TYPE="${{ needs.calculate-version.outputs.versionType }}"
        PACKAGE_VERSION="${{ needs.calculate-version.outputs.nugetVersion }}"
        
        echo "Packing packages:"
        echo "  Version Type: $VERSION_TYPE" 
        echo "  Package Version: $PACKAGE_VERSION"
        
        # Pack DevelApp.StepLexer
        dotnet pack src/DevelApp.StepLexer/DevelApp.StepLexer.csproj \
          --configuration Release \
          --no-build \
          --output ./nupkg \
          -p:PackageVersion=$PACKAGE_VERSION \
          -p:Version=${{ needs.calculate-version.outputs.version }}
        
        # Pack DevelApp.StepParser  
        dotnet pack src/DevelApp.StepParser/DevelApp.StepParser.csproj \
          --configuration Release \
          --no-build \
          --output ./nupkg \
          -p:PackageVersion=$PACKAGE_VERSION \
          -p:Version=${{ needs.calculate-version.outputs.version }}
          
        echo "Generated packages:"
        ls -la ./nupkg/
          
    - name: Upload CI NuGet packages
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: ci-nuget-packages
        path: ./nupkg/*.nupkg

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Security scan
      run: |
        dotnet list package --vulnerable --include-transitive || true
        dotnet list package --deprecated || true

  publish-github-packages:
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test, security-scan]
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Download CI NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: ci-nuget-packages
        path: ./nupkg
        
    - name: Set up NuGet authentication
      run: |
        dotnet nuget add source \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text \
          --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          
    - name: Publish to GitHub Packages
      run: |
        VERSION_TYPE="${{ needs.calculate-version.outputs.versionType }}"
        PACKAGE_VERSION="${{ needs.calculate-version.outputs.nugetVersion }}"
        
        echo "Publishing packages to GitHub Packages:"
        echo "  Version Type: $VERSION_TYPE"
        echo "  Package Version: $PACKAGE_VERSION" 
        echo "  Event: ${{ github.event_name }}"
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TARGET_BRANCH="${{ github.base_ref }}"
          if [[ "$TARGET_BRANCH" == "main" ]]; then
            echo "ðŸ“¦ Publishing BETA packages (PR to main) to GitHub Packages"
          else
            echo "ðŸ“¦ Publishing ALPHA packages (PR to $TARGET_BRANCH) to GitHub Packages"
          fi
        else
          echo "ðŸ“¦ Publishing CI packages (direct push) to GitHub Packages"
        fi
        
        for package in ./nupkg/*.nupkg; do
          echo "Publishing $package to GitHub Packages..."
          dotnet nuget push "$package" \
            --source github \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate || echo "Package already exists, skipping..."
        done
        
        echo "âœ… Package publishing complete!"
        echo "ðŸ“¦ Published packages:"
        ls -la ./nupkg/