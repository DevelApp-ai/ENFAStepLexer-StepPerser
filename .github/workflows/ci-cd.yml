name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  DOTNET_VERSION: '8.0.x'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.SemVer }}
      nugetVersion: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
      releaseVersion: ${{ steps.calculate-clean-version.outputs.clean_version }}
      isPrerelease: ${{ steps.gitversion.outputs.PreReleaseTag != '' }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml
        
    - name: Calculate clean version for releases
      id: calculate-clean-version
      run: |
        # Extract clean version without pre-release suffix for releases
        FULL_VERSION="${{ steps.gitversion.outputs.SemVer }}"
        # Remove any pre-release suffix (everything after the first hyphen)
        CLEAN_VERSION=$(echo "$FULL_VERSION" | sed 's/-.*$//')
        echo "Full version: $FULL_VERSION"
        echo "Clean version: $CLEAN_VERSION"
        echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

  build-and-test:
    runs-on: ubuntu-latest
    needs: calculate-version
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore -p:Version=${{ needs.calculate-version.outputs.version }}
      
    - name: Test
      run: dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory ./TestResults
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.configuration }}
        path: ./TestResults
        
    - name: Pack NuGet packages
      if: matrix.configuration == 'Release'
      run: |
        # Pack DevelApp.StepLexer
        dotnet pack src/DevelApp.StepLexer/DevelApp.StepLexer.csproj \
          --configuration Release \
          --no-build \
          --output ./nupkg \
          -p:PackageVersion=${{ needs.calculate-version.outputs.nugetVersion }} \
          -p:Version=${{ needs.calculate-version.outputs.version }}
        
        # Pack DevelApp.StepParser
        dotnet pack src/DevelApp.StepParser/DevelApp.StepParser.csproj \
          --configuration Release \
          --no-build \
          --output ./nupkg \
          -p:PackageVersion=${{ needs.calculate-version.outputs.nugetVersion }} \
          -p:Version=${{ needs.calculate-version.outputs.version }}
          
    - name: Upload NuGet packages
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkg/*.nupkg

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Security scan
      run: |
        dotnet list package --vulnerable --include-transitive || true
        dotnet list package --deprecated || true

  publish-github-packages:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test, security-scan]
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Download NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkg
        
    - name: Set up NuGet authentication
      run: |
        dotnet nuget add source \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text \
          --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          
    - name: Publish to GitHub Packages
      run: |
        for package in ./nupkg/*.nupkg; do
          echo "Publishing $package to GitHub Packages..."
          dotnet nuget push "$package" \
            --source github \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate || echo "Package already exists, skipping..."
        done

  publish-nuget-org:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test, security-scan, publish-github-packages]
    environment: production
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build Release packages with clean versions
      run: |
        # Build projects first
        dotnet build --configuration Release --no-restore -p:Version=${{ needs.calculate-version.outputs.releaseVersion }}
        
        # Pack with clean version for release
        dotnet pack src/DevelApp.StepLexer/DevelApp.StepLexer.csproj \
          --configuration Release \
          --no-build \
          --output ./nupkg \
          -p:PackageVersion=${{ needs.calculate-version.outputs.releaseVersion }} \
          -p:Version=${{ needs.calculate-version.outputs.releaseVersion }}
        
        dotnet pack src/DevelApp.StepParser/DevelApp.StepParser.csproj \
          --configuration Release \
          --no-build \
          --output ./nupkg \
          -p:PackageVersion=${{ needs.calculate-version.outputs.releaseVersion }} \
          -p:Version=${{ needs.calculate-version.outputs.releaseVersion }}
          
        echo "Release packages created:"
        ls -la ./nupkg/
        
    - name: Create local packages folder
      run: |
        mkdir -p ./packages
        cp ./nupkg/*.nupkg ./packages/
        echo "Packages copied to local packages folder:"
        ls -la ./packages/
        
    - name: Upload packages folder artifact
      uses: actions/upload-artifact@v4
      with:
        name: packages-folder
        path: ./packages/
        retention-days: 30
        
    - name: Check release conditions
      id: release_check
      run: |
        echo "Checking release conditions..."
        
        # Check if this is a stable release (not prerelease)
        IS_STABLE="${{ needs.calculate-version.outputs.isPrerelease == 'false' }}"
        echo "Is stable release: $IS_STABLE"
        
        # Check if this is the first release (no existing tags)
        if ! git tag -l | grep -q .; then
          IS_FIRST_RELEASE="true"
          echo "First release detected: true"
        else
          IS_FIRST_RELEASE="false"
          echo "First release detected: false"
        fi
        
        # Determine if we should proceed with release
        if [[ "$IS_STABLE" == "true" || "$IS_FIRST_RELEASE" == "true" ]]; then
          SHOULD_RELEASE="true"
          echo "Should create release: true"
        else
          SHOULD_RELEASE="false"
          echo "Should create release: false"
        fi
        
        echo "is_stable=$IS_STABLE" >> $GITHUB_OUTPUT
        echo "is_first_release=$IS_FIRST_RELEASE" >> $GITHUB_OUTPUT
        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        
    - name: Publish to NuGet.org (when secrets available)
      if: steps.release_check.outputs.should_release == 'true' && env.NUGET_API_KEY != ''
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        # Check which type of release this is
        if [[ "${{ steps.release_check.outputs.is_first_release }}" == "true" ]]; then
          echo "First release detected - publishing initial NuGet packages"
        else
          echo "Subsequent release detected - using standard publishing"
        fi
        
        for package in ./nupkg/*.nupkg; do
          echo "Publishing $package to NuGet.org..."
          dotnet nuget push "$package" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate || echo "Package already exists, skipping..."
        done
        
    - name: Note about NuGet.org publishing
      if: steps.release_check.outputs.should_release == 'true' && env.NUGET_API_KEY == ''
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        echo "‚ö†Ô∏è  NUGET_API_KEY not available - skipping NuGet.org publishing"
        echo "üì¶ Packages are available in the packages-folder artifact for manual publishing"

  create-github-release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test, security-scan, publish-nuget-org]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download packages folder
      uses: actions/download-artifact@v4
      with:
        name: packages-folder
        path: ./packages
        
    - name: List available packages
      run: |
        echo "üì¶ Available packages for release:"
        ls -la ./packages/
      
    - name: Check release conditions
      id: release_check
      run: |
        echo "Checking release conditions..."
        
        # Check if this is a stable release (not prerelease)
        IS_STABLE="${{ needs.calculate-version.outputs.isPrerelease == 'false' }}"
        echo "Is stable release: $IS_STABLE"
        
        # Check if this is the first release (no existing tags)
        if ! git tag -l | grep -q .; then
          IS_FIRST_RELEASE="true"
          echo "First release detected: true"
        else
          IS_FIRST_RELEASE="false"
          echo "First release detected: false"
        fi
        
        # Determine if we should proceed with release
        if [[ "$IS_STABLE" == "true" || "$IS_FIRST_RELEASE" == "true" ]]; then
          SHOULD_RELEASE="true"
          echo "Should create release: true"
        else
          SHOULD_RELEASE="false"
          echo "Should create release: false"
        fi
        
        echo "is_stable=$IS_STABLE" >> $GITHUB_OUTPUT
        echo "is_first_release=$IS_FIRST_RELEASE" >> $GITHUB_OUTPUT
        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
      
    - name: Create GitHub Release
      if: steps.release_check.outputs.should_release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check which type of release this is
        if [[ "${{ steps.release_check.outputs.is_first_release }}" == "true" ]]; then
          echo "First release detected - creating initial release tag"
          RELEASE_VERSION="${{ needs.calculate-version.outputs.version }}"
          # For initial release, use the major.minor.patch without prerelease suffix
          CLEAN_VERSION=$(echo "$RELEASE_VERSION" | sed 's/-.*$//')
          echo "Creating release for version: $CLEAN_VERSION"
          git tag "v$CLEAN_VERSION"
          git push origin "v$CLEAN_VERSION"
          
          # Create the GitHub release
          gh release create "v$CLEAN_VERSION" \
            --title "Release v$CLEAN_VERSION" \
            --notes "## Changes in v$CLEAN_VERSION
          
          ### New Package Architecture
          - üì¶ **DevelApp.StepLexer** - Advanced UTF-8 tokenization with multi-path support
          - üì¶ **DevelApp.StepParser** - GLR-style multi-path parsing with CognitiveGraph integration
          
          ### GrammarForge Step-Parser Features
          - ‚ú® StepLexer with unified regex pattern parsing and source tokenization
          - ‚ö° StepParser with GLR-style incremental parsing for ambiguity resolution
          - üîó CognitiveGraph integration for advanced semantic analysis  
          - üéØ Context-sensitive grammar support with hierarchical scopes
          - üîß Location-based refactoring operations (extract, inline, rename)
          - üìù Grammar inheritance with ANTLR/Bison/Yacc base grammar support
          - üíæ Zero-copy UTF-8 processing with ReadOnlyMemory support
          - üîÄ Multi-path tokenization for handling ambiguous input
          
          ### Breaking Changes
          - Replaced single ENFAStepLexer.StepParser package with split architecture
          - Updated namespace from ENFA_Parser.Core to DevelApp.StepLexer/DevelApp.StepParser
          - Integrated AST functionality with DevelApp.CognitiveGraph
          
          See the [CHANGELOG](CHANGELOG.md) for detailed changes." \
            --target main \
            ./packages/*.nupkg
        else
          echo "Subsequent release detected - using standard release process"
          git tag v${{ needs.calculate-version.outputs.version }}
          git push origin v${{ needs.calculate-version.outputs.version }}
          
          # Create the GitHub release
          gh release create v${{ needs.calculate-version.outputs.version }} \
            --title "Release v${{ needs.calculate-version.outputs.version }}" \
            --notes "## Changes in v${{ needs.calculate-version.outputs.version }}
          
          ### New Package Architecture
          - üì¶ **DevelApp.StepLexer** - Advanced UTF-8 tokenization with multi-path support
          - üì¶ **DevelApp.StepParser** - GLR-style multi-path parsing with CognitiveGraph integration
          
          ### GrammarForge Step-Parser Features
          - ‚ú® StepLexer with unified regex pattern parsing and source tokenization
          - ‚ö° StepParser with GLR-style incremental parsing for ambiguity resolution
          - üîó CognitiveGraph integration for advanced semantic analysis  
          - üéØ Context-sensitive grammar support with hierarchical scopes
          - üîß Location-based refactoring operations (extract, inline, rename)
          - üìù Grammar inheritance with ANTLR/Bison/Yacc base grammar support
          - üíæ Zero-copy UTF-8 processing with ReadOnlyMemory support
          - üîÄ Multi-path tokenization for handling ambiguous input
          
          ### Breaking Changes
          - Replaced single ENFAStepLexer.StepParser package with split architecture
          - Updated namespace from ENFA_Parser.Core to DevelApp.StepLexer/DevelApp.StepParser
          - Integrated AST functionality with DevelApp.CognitiveGraph
          
          See the [CHANGELOG](CHANGELOG.md) for detailed changes." \
            --target main \
            ./packages/*.nupkg
        fi